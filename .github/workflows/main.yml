name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ==================== BUILD & TEST ====================
  build:
    name: Build & Test
    runs-on: self-hosted
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Get User ID for ownership
      run: |
        echo "USER_ID=$(id -u hieunq)" >> $GITHUB_ENV
        echo "GROUP_ID=$(id -g hieunq)" >> $GITHUB_ENV
        echo "User ID: $(id -u hieunq)"
        echo "Group ID: $(id -g hieunq)"

    - name: 🏗️ Test Build Backend
      run: |
        docker build -f .docker/production/backend/Dockerfile .

    - name: 🏗️ Test Build Frontend
      run: |
        docker build -f .docker/production/frontend/Dockerfile .

    - name: 🔧 Fix ownership after Docker builds
      run: |
        sudo chown -R ${{ env.USER_ID }}:${{ env.GROUP_ID }} ${{ github.workspace }} || true
        sudo chmod -R 755 ${{ github.workspace }} || true

    - name: ✅ Build Test Completed
      run: echo "Build test completed successfully!"

  # ==================== DEPLOY ====================
  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Get User ID for ownership
      run: |
        echo "USER_ID=$(id -u hieunq)" >> $GITHUB_ENV
        echo "GROUP_ID=$(id -g hieunq)" >> $GITHUB_ENV
        echo "User ID: $(id -u hieunq)"
        echo "Group ID: $(id -g hieunq)"

    - name: 🚀 Deploy to Production
      run: |
        echo "📥 Code already checked out..."
        
        # Stop existing containers
        echo "⏹️ Stopping existing containers..."
        docker-compose -f docker-compose.production.yml down || true
        
        # Remove old images to save space
        echo "🧹 Cleaning old images..."
        docker image prune -f || true
        
        # Build and start with production environment
        echo "🚀 Building and starting containers..."
        docker-compose -f docker-compose.production.yml build --no-cache
        docker-compose -f docker-compose.production.yml up -d
        
        # Fix ownership after Docker operations
        echo "🔧 Fixing ownership after Docker operations..."
        sudo chown -R ${{ env.USER_ID }}:${{ env.GROUP_ID }} ${{ github.workspace }} || true
        sudo chmod -R 755 ${{ github.workspace }} || true
        
        # Health check
        echo "🏥 Performing health check..."
        sleep 30
        curl -f http://localhost/health || { echo "Health check failed"; exit 1; }
        
        echo "✅ Deployment completed successfully!"
        echo "🌐 Frontend: https://todonest.id.vn"
        echo "🌐 Backend API: https://todonest.id.vn/api"
        echo "🏥 Health Check: https://todonest.id.vn/health"