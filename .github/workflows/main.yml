name: RoomMate CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ==================== BUILD & TEST ====================
  build:
    name: Build & Test
    runs-on: self-hosted
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏗️ Test Build Backend
      run: |
        echo "🔨 Backend build..."
        cd backend
        docker build -f ../.docker/production/backend/Dockerfile .
        echo "✅ Backend build test passed!"
    
    - name: 🏗️ Test Build Frontend
      run: |
        echo "🔨 Frontend build..."
        cd frontend
        docker build -f ../.docker/production/frontend/Dockerfile .
        echo "✅ Frontend build test passed!"
    
    - name: ✅ Build Test Completed
      run: echo "🎉 All build tests completed successfully!"

  # ==================== DEPLOY ====================
  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Production
      run: |
        echo "📥 Code already checked out..."
        
        # Navigate to deployment directory
        cd /opt/roommate
        
        # Set environment variables
        export POSTGRES_DB='${{ vars.POSTGRES_DB }}'
        export POSTGRES_USER='${{ vars.POSTGRES_USER }}'
        export POSTGRES_PASSWORD='${{ vars.POSTGRES_PASSWORD }}'
        
        # Update deployment files
        echo "📋 Updating deployment files..."
        cp ${{ github.workspace }}/docker-compose.production.yml .
        cp -r ${{ github.workspace }}/.docker .
        
        # Stop existing containers
        echo "⏹️ Stopping existing containers..."
        docker-compose -f docker-compose.production.yml down || true
        
        # Remove old images to save space
        echo "🧹 Cleaning old images..."
        docker image prune -f || true
        
        # Build and start with production environment
        echo "🚀 Building and starting containers..."
        docker-compose -f docker-compose.production.yml build --no-cache
        docker-compose -f docker-compose.production.yml up -d
        
        # Health check
        echo "🏥 Performing health check..."
        sleep 30
        
        # Check HTTP health endpoint
        if curl -f http://localhost/health > /dev/null 2>&1; then
          echo "✅ HTTP health check passed!"
        else
          echo "❌ HTTP health check failed!"
          docker-compose -f docker-compose.production.yml logs --tail=20
          exit 1
        fi
        
        # Check HTTPS if Let's Encrypt is configured
        if [ -d /etc/letsencrypt/live/todonest.id.vn ]; then
          echo "🔒 Checking HTTPS..."
          if curl -f -k https://localhost/health > /dev/null 2>&1; then
            echo "✅ HTTPS health check passed!"
          else
            echo "⚠️  HTTPS health check failed (check SSL certificates)"
          fi
        else
          echo "ℹ️  Let's Encrypt certificates not found"
          echo "ℹ️  Run: sudo certbot certonly --standalone -d todonest.id.vn"
        fi
        
        echo "✅ Deployment completed successfully!"
        echo "🌐 Frontend: https://todonest.id.vn"
        echo "🌐 Backend API: https://todonest.id.vn/api"
        echo "🏥 Health Check: https://todonest.id.vn/health"
        
        # Show running containers
        echo "📋 Running containers:"
        docker-compose -f docker-compose.production.yml ps