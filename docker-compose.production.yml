version: "3.8"

services:
  backend:
    build:
      context: .
      dockerfile: ./.docker/production/backend/Dockerfile
      target: production
      cache_from:
        - node:20-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: "roommate_be_prod"
    restart: always
    ports:
      - "3000:3000" 
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_HOST=roommate_postgres_prod
      - DATABASE_PORT=5432
      - DATABASE_NAME=${{ secrets.POSTGRES_DB }}
      - DATABASE_USER=${{ secrets.POSTGRES_USER }}
      - DATABASE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
      - DATABASE_URL=${{ secrets.DATABASE_URL }}
      - FRONTEND_URL=${{ secrets.FRONTEND_URL }}
      - API_BASE_URL=${{ secrets.API_BASE_URL }}
      - CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
      - JWT_SECRET=${{ secrets.JWT_SECRET }}
      - JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
      - API_PORT=${{ secrets.API_PORT }}
      - API_HOST=${{ secrets.API_HOST }}
    networks:
      - roommate-network
    depends_on:
      - postgres

  frontend:
    build:
      context: .
      dockerfile: ./.docker/production/frontend/Dockerfile
      target: production
      cache_from:
        - node:20-alpine
        - nginx:alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
        NUXT_PUBLIC_API_BASE: ${NUXT_PUBLIC_API_BASE}
    container_name: "roommate_fe_prod"
    restart: always
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_API_BASE=${{ secrets.NUXT_PUBLIC_API_BASE }}
      - NUXT_PUBLIC_FRONTEND_URL=${{ secrets.NUXT_PUBLIC_FRONTEND_URL }}
      - NUXT_PUBLIC_APP_NAME=${{ secrets.NUXT_PUBLIC_APP_NAME }}
    networks:
      - roommate-network
    depends_on:
      backend:
        condition: service_started

  postgres:
    image: postgres:15-alpine
    container_name: "roommate_postgres_prod"
    restart: always
    environment:
      - POSTGRES_DB=${{ secrets.POSTGRES_DB }}
      - POSTGRES_USER=${{ secrets.POSTGRES_USER }}
      - POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - roommate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: "roommate_nginx_prod"
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.docker/production/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /home/hieunq/roommate_cache/nginx:/var/cache/nginx:rw
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - roommate-network

volumes:
  postgres_data:

networks:
  roommate-network:
    driver: bridge